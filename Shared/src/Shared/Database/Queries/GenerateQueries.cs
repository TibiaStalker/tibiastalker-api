//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool (GenerateQueries).
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     To regenerate this file, please click 'Run Template' at GenerateQueries.tt file.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Shared.Database.Queries.Sql
{
    public static class GenerateQueries
    {
        public const string MssqlClearCharacterLogoutOrLogins = @"DELETE FROM CharacterLogoutOrLogins;";

        public const string MssqlCreateCharacterCorrelation = @"
WITH CartesianProduct AS 
(
SELECT 
 f.CharacterId AS LogoutCharacterId
,t.CharacterId AS LoginCharacterId
FROM 
	(SELECT ch.CharacterName, c.CharacterId
	FROM CharacterLogoutOrLogins ch
	INNER JOIN Characters c ON ch.CharacterName = c.Name
	WHERE ch.IsOnline = 0) AS f, 
	(SELECT CharacterName, c.CharacterId
	FROM CharacterLogoutOrLogins ch
	INNER JOIN Characters c ON ch.CharacterName = c.Name
	WHERE IsOnline = 1) AS t 
)

 MERGE CharacterCorrelations AS target
 USING CartesianProduct AS source ON 
	(target.LogoutCharacterId = source.LogoutCharacterId AND target.LoginCharacterId = source.LoginCharacterId) OR 
	(target.LogoutCharacterId = source.LoginCharacterId AND target.LoginCharacterId = source.LogoutCharacterId)

 WHEN MATCHED
 THEN
     UPDATE SET
         target.NumberOfMatches += 1
  
 WHEN NOT MATCHED
 THEN
     INSERT (
	 LogoutCharacterId, 
	 LoginCharacterId, 
	 NumberOfMatches
	 )
     VALUES (
	 source.LogoutCharacterId, 
	 source.LoginCharacterId, 
	 1
	 );";

        public const string MssqlCreateCharacterIfNotExist = @"INSERT INTO Characters (Name, WorldId)
SELECT DISTINCT CharacterName, WorldId
FROM CharacterLogoutOrLogins clol
WHERE NOT EXISTS (
          SELECT Name
          FROM Characters c
          WHERE clol.CharacterName = c.Name);";

        /// <summary>
        /// Required parameters: 
        ///    @CharacterName
        /// </summary>
        public const string MssqlGetOtherPossibleCharacters = @"WITH cor AS (
SELECT TOP 10 CorrelationId
      ,f.Name AS LogoutName
      ,t.Name AS LoginName
      ,NumberOfMatches
  FROM CharacterCorrelations cc
  INNER JOIN Characters f on f.CharacterId = cc.LogoutCharacterId
  INNER JOIN Characters t on t.CharacterId = cc.LoginCharacterId
  where t.Name = @CharacterName OR f.Name = @CharacterName
  ORDER BY NumberOfMatches DESC
  )

  SELECT CorrelationId
        ,LoginName AS OtherCharacterName
        ,NumberOfMatches
  FROM cor
  WHERE NOT LoginName = @CharacterName
  
  UNION

  SELECT CorrelationId
        ,LogoutName AS OtherCharacterName
        ,NumberOfMatches
  FROM cor
  WHERE NOT LogoutName = @CharacterName
  ORDER BY NumberOfMatches DESC
";

        public const string NpgsqlClearCharacterActions = @"DELETE FROM character_actions;";

        public const string NpgsqlClearDeletedWorldScans = @"DELETE FROM world_scans
	WHERE is_deleted;";

        public const string NpgsqlCreateCharacterCorrelationIfNotExist = @"WITH cp AS (
    SELECT f.character_id AS logout, t.character_id AS login, f.logout_or_login_date AS creating_date
    FROM (
        SELECT ch.character_name, c.character_id, ch.logout_or_login_date
        FROM character_actions ch
        INNER JOIN characters c ON ch.character_name = c.name
        WHERE ch.is_online = false
    ) AS f
    CROSS JOIN (
        SELECT character_name, c.character_id
        FROM character_actions ch
        INNER JOIN characters c ON ch.character_name = c.name
        WHERE is_online = true
    ) AS t
)
INSERT INTO character_correlations (logout_character_id, login_character_id, number_of_matches, create_date, last_match_date)
SELECT logout, login, 1, creating_date, creating_date
FROM cp
LEFT JOIN character_correlations cc
ON (cc.logout_character_id = logout AND cc.login_character_id = login)
    OR (cc.logout_character_id = login AND cc.login_character_id = logout)
WHERE cc.logout_character_id IS NULL;";

        public const string NpgsqlCreateCharacterIfNotExist = @"INSERT INTO characters (name, world_id)
SELECT DISTINCT ca.character_name, ca.world_id
FROM character_actions ca
LEFT JOIN characters c ON ca.character_name = c.name
WHERE c.name IS NULL;";

        public const string NpgsqlDeleteCharacterCorrelationIfCorrelationExistInFirstScan = @"WITH online_characters AS (SELECT character_id FROM ""characters"" c INNER JOIN character_actions ca ON c.""name"" = ca.character_name WHERE is_online = true)
DELETE FROM character_correlations
WHERE logout_character_id IN
      (SELECT character_id
       FROM online_characters)
    AND login_character_id IN
        (SELECT character_id
         FROM online_characters)";

        public const string NpgsqlDeleteCharacterCorrelationIfCorrelationExistInScan = @"WITH online_characters AS
         (SELECT character_id FROM characters c WHERE found_in_scan = true)

DELETE FROM character_correlations
WHERE logout_character_id IN
      (SELECT character_id
       FROM online_characters)

  AND login_character_id IN
      (SELECT character_id
       FROM online_characters)";

        public const string NpgsqlDeleteCharacterCorrelationIfCorrelationExistInSecondScan = @"WITH offline_characters AS (SELECT character_id FROM ""characters"" c INNER JOIN character_actions ca ON c.""name"" = ca.character_name WHERE is_online = false)
DELETE FROM character_correlations
WHERE logout_character_id IN
      (SELECT character_id
       FROM offline_characters)
    AND login_character_id IN
        (SELECT character_id
         FROM offline_characters)";

        public const string NpgsqlGetActiveWorlds = @"SELECT name, url  FROM worlds WHERE is_available = TRUE ORDER BY name";

        /// <summary>
        /// Required parameters: 
        ///    @CharacterName
        /// </summary>
        public const string NpgsqlGetOtherPossibleCharacters = @"WITH character_id_CTE AS (SELECT character_id FROM characters WHERE name = @CharacterName)

SELECT DISTINCT c.name AS other_character_name, number_of_matches, create_date, last_match_date FROM character_correlations cc 
JOIN characters c ON c.character_id = cc.login_character_id OR c.character_id = cc.logout_character_id 
WHERE (logout_character_id = (SELECT character_id FROM character_id_CTE) OR login_character_id = (SELECT character_id FROM character_id_CTE)) 
AND c.character_id <> (SELECT character_id FROM character_id_CTE)
ORDER BY number_of_matches DESC LIMIT 10";

        public const string NpgsqlUpdateCharacterCorrelationIfExist = @"WITH cp AS (
  SELECT 
    f.character_id AS logout,
    t.character_id AS login,
    f.logout_or_login_date AS creating_date
  FROM 
    (
      SELECT ch.character_name, c.character_id, ch.logout_or_login_date
      FROM character_actions ch
      INNER JOIN characters c ON ch.character_name = c.name
      WHERE ch.is_online = false
    ) AS f
    CROSS JOIN 
    (
      SELECT character_name, c.character_id
      FROM character_actions ch
      INNER JOIN characters c ON ch.character_name = c.name
      WHERE is_online = true
    ) AS t
)

UPDATE character_correlations cc
SET number_of_matches = number_of_matches + 1, last_match_date = creating_date
FROM cp
WHERE 
  (cc.logout_character_id = cp.logout AND cc.login_character_id = cp.login)
  OR 
  (cc.logout_character_id = cp.login AND cc.login_character_id = cp.logout);";

        public const string NpgsqlUpdateCharactersSetFoundInScanFalse = @"UPDATE characters SET found_in_scan = FALSE WHERE found_in_scan = TRUE";

    }

}

