<#@ template language="C#" hostspecific="True" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Linq" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool (GenerateQueries).
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     To regenerate this file, please click 'Run Template' at GenerateQueries.tt file.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Shared.Database.Queries.Sql
{
<#
	string basePath = GetBaseQueriesPath();
	HandleDirectory(basePath, 1);
#>
}

<#+
	private string GetBaseQueriesPath()
	{
        string templateLocation = Path.GetDirectoryName(this.Host.TemplateFile);
        return Path.Combine(templateLocation, "Sql");
	}

	private void HandleDirectory(string path, int level)
    {
        string dirName = level == 1 ? "Queries" : Path.GetFileName(path);
        string[] files = Directory.GetFiles(path, "*.sql", SearchOption.TopDirectoryOnly);
		string[] subDirs = Directory.GetDirectories(path, "*", SearchOption.TopDirectoryOnly);
		
		string ident = new string(' ', level * 4);

        WriteLine($"{ident}public static class {NormalizeClassName(dirName)}");
        WriteLine($"{ident}{{");

        foreach (string file in files)
        {
			string fileNameOnly = Path.GetFileNameWithoutExtension(file);
            if (string.IsNullOrWhiteSpace(fileNameOnly))
                continue;
			
			string queryContent = GetQueryContent(file);
            string[] parameters = ParseParameters(queryContent);

            if (parameters.Length > 0)
            {
                WriteLine($"{ident}    /// <summary>");
                WriteLine($"{ident}    /// Required parameters: ");
                foreach (var parameter in parameters)
                {
                    WriteLine($"{ident}    ///    {parameter}");
                }
                WriteLine($"{ident}    /// </summary>");
            }

            WriteLine($"{ident}    public const string {NormalizePropName(fileNameOnly)} = @\"{queryContent}\";");
			WriteLine("");
        }        

        foreach (string subDir in subDirs)
        {
            HandleDirectory(subDir, level + 1);
        }

        WriteLine($"{ident}}}");
		WriteLine("");
    }

	private string NormalizeClassName(string dirName)
    {
        return char.ToUpperInvariant(dirName[0]) + dirName.Substring(1);
    }

	private string NormalizePropName(string fileName)
    {
        string nameOnly = Path.GetFileNameWithoutExtension(fileName).Replace(" ", string.Empty);
        string[] parts = nameOnly.Split(' ', '.', '-', '_');
            
        string result = string.Empty;

        foreach (var part in parts)
        {
            result += char.ToUpper(part[0]) + part.Substring(1);
        }

        return result;
    }

	private string GetQueryContent(string path)
    {
        string content = File.ReadAllText(path);

		content = content.Replace("\"", "\"\"");

		return content;
    }

	private static string[] ParseParameters(string content)
    {
        return Regex.Matches(content, @"\@\w+")
            .Cast<Match>()
            .Select(m => m.Value)
            .Distinct()
            .OrderBy(r => r)
            .ToArray();
    }
#>
