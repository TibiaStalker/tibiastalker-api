//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool (GenerateQueries).
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     To regenerate this file, please click 'Run Template' at GenerateQueries.tt file.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Shared.Database.Queries.Sql
{
    public static class GenerateQueries
    {
        public const string ClearCharacterLogoutOrLogins = @"DELETE FROM CharacterLogoutOrLogins;";

        public const string CreateCharacterCorrelation = @"
WITH CartesianProduct AS 
(
SELECT 
 f.CharacterId AS LogoutCharacterId
,t.CharacterId AS LoginCharacterId
FROM 
	(SELECT ch.CharacterName, c.CharacterId
	FROM CharacterLogoutOrLogins ch
	INNER JOIN Characters c ON ch.CharacterName = c.Name
	WHERE ch.IsOnline = 0) AS f, 
	(SELECT CharacterName, c.CharacterId
	FROM CharacterLogoutOrLogins ch
	INNER JOIN Characters c ON ch.CharacterName = c.Name
	WHERE IsOnline = 1) AS t 
)

 MERGE CharacterCorrelations AS target
 USING CartesianProduct AS source ON 
	(target.LogoutCharacterId = source.LogoutCharacterId AND target.LoginCharacterId = source.LoginCharacterId) OR 
	(target.LogoutCharacterId = source.LoginCharacterId AND target.LoginCharacterId = source.LogoutCharacterId)

 WHEN MATCHED
 THEN
     UPDATE SET
         target.NumberOfMatches += 1
  
 WHEN NOT MATCHED
 THEN
     INSERT (
	 LogoutCharacterId, 
	 LoginCharacterId, 
	 NumberOfMatches
	 )
     VALUES (
	 source.LogoutCharacterId, 
	 source.LoginCharacterId, 
	 1
	 );";

        public const string CreateCharacterIfNotExist = @"INSERT INTO Characters (Name, WorldId)
SELECT DISTINCT CharacterName, WorldId
FROM CharacterLogoutOrLogins clol
WHERE NOT EXISTS (
          SELECT Name
          FROM Characters c
          WHERE clol.CharacterName = c.Name);";

        /// <summary>
        /// Required parameters: 
        ///    @CharacterName
        /// </summary>
        public const string GetOtherPossibleCharacters = @"WITH cor AS (
SELECT TOP 10 CorrelationId
      ,f.Name AS LogoutName
      ,t.Name AS LoginName
      ,NumberOfMatches
  FROM CharacterCorrelations cc
  INNER JOIN Characters f on f.CharacterId = cc.LogoutCharacterId
  INNER JOIN Characters t on t.CharacterId = cc.LoginCharacterId
  where t.Name = @CharacterName OR f.Name = @CharacterName
  ORDER BY NumberOfMatches DESC
  )

  SELECT CorrelationId
        ,LoginName AS OtherCharacterName
        ,NumberOfMatches
  FROM cor
  WHERE NOT LoginName = @CharacterName
  
  UNION

  SELECT CorrelationId
        ,LogoutName AS OtherCharacterName
        ,NumberOfMatches
  FROM cor
  WHERE NOT LogoutName = @CharacterName
  ORDER BY NumberOfMatches DESC
";

        public const string NpgsqlClearCharacterActions = @"DELETE FROM character_actions;";

        public const string NpgsqlCreateCharacterCorrelation = @"WITH cartesian_product AS 
(
SELECT 
 f.character_id AS logout_character_id
,t.character_id AS login_character_id
FROM 
	(SELECT ch.character_name, c.character_id
	FROM character_actions ch
	INNER JOIN characters c ON ch.character_name = c.name
	WHERE ch.is_online = 0) AS f, 
	(SELECT character_name, c.character_id
	FROM character_actions ch
	INNER JOIN characters c ON ch.character_name = c.name
	WHERE is_online = 1) AS t 
)

 MERGE character_correlations AS target
 USING cartesian_product AS source ON 
	(target.logout_character_id = source.logout_character_id AND target.login_character_id = source.login_character_id) OR 
	(target.logout_character_id = source.login_character_id AND target.login_character_id = source.logout_character_id)

 WHEN MATCHED
 THEN
     UPDATE SET
         target.number_of_matches += 1
  
 WHEN NOT MATCHED
 THEN
     INSERT (
	 logout_character_id, 
	 login_character_id, 
	 number_of_matches
	 )
     VALUES (
	 source.logout_character_id, 
	 source.login_character_id, 
	 1
	 );";

        public const string NpgsqlCreateCharacterIfNotExist = @"INSERT INTO characters (name, world_id)
SELECT DISTINCT character_name, world_id
FROM character_actions ca
WHERE NOT EXISTS (
          SELECT Name
          FROM characters c
          WHERE ca.character_name = c.name);";

    }

}

